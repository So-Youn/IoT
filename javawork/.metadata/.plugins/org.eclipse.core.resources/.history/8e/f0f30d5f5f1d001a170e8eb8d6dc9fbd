package oop.Chap07.poly;

//객체의 형변환 - 상속관계에 있는 경우에만 가능하다.
class Parent {
	String name = "장동건";

	public void display() {
		System.out.println("부모의 display");
	}
} // child와 parent는 형변환 가능. child와 child2는 형변환 불가능(상속x)

class Child extends Parent {
	String name = "이민호";

	public void display() {
		System.out.println("자식 클래스의 display");
	}

	public void test() {
		System.out.println("하위클래스에만 정의된 메소드");
	}
}

public class RefCastingTest {
	public static void main(String[] args) {
		System.out.println("1.Super타입의 참조변수로 Super객체를 참조");
		Parent obj1 = new Parent();
		obj1.display();
		System.out.println(obj1.name);
		
		System.out.println("******************************");
		System.out.println("2.sub타입의 참조변수로 sub객체 참조");
		Child obj2 = new Child();
		obj2.display();
		System.out.println(obj2.name);
		/*
		 * 객체의 형변환
		 * -변수는 참조변수 타입에 따라서 결정, 메소드는 생성되는 객체가 기준
		 */
		System.out.println("******************************");
		System.out.println("3. super타입의 참조변수로 sub객체 참조");
		Parent obj3 = new Child();		
		obj3.display();	// 메소드 : 오버라이딩된 메소드라면 오버라이딩 된 메소드가 호출
		System.out.println(obj3.name);	//변수 : 참조변수 타입에 해당하는 
										//클레스의 멤버변수가 실행됨.
		//obj3.test();		-> obj3은 parent라서 자동형변환이 필요하다!
		//타입이 parent 타입이지만 실제로 생성된 객체가 child 타입이기 때문에 child타입으로 형변환이 가능하다.(명시적)
		((Child)obj3).test();	//obj3을 child로 형변환
		System.out.println("******************************");
		System.out.println("4. sub타입의 참조변수로 super객체 참조 불가능ㅇ");
	//	Child obj4 = new Parent(); //cannot convert from Parent to Child 
		
	}

}
